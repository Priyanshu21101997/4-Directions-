
#include<cstring>
void hasPath(char cake[NMAX][NMAX],int **visited,int n,int i,int j,int &count){
    

    if(i<0 || j<0 || i>=n || j>=n || visited[i][j]==1 || cake[i][j]=='0'  ){
        return ;
    }
    
    visited[i][j]=1;
    count++;
    
  int x[]={0,1,0,-1}; 
  int y[]={1,0,-1,0};
    
    
    for(int k=0;k<4;k++){
     hasPath(cake,visited,n,i+x[k],j+y[k],count);
       }
    
}

int solve(int n,char cake[NMAX][NMAX])

{
    int **visited=new int*[n];
    for(int i=0;i<n;i++){
        visited[i]=new int[n];
        for(int j=0;j<n;j++){
            visited[i][j]=0;
        }
    }
    
    int count=0;
    int maxm=-1;
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            if(cake[i][j]=='1'){
                count=0;
        		hasPath(cake,visited,n,i,j,count);
                maxm=max(maxm,count);
            }
        }
    }   

return maxm;
}
